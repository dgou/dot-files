# base-files version 3.2-1

# Why do so many aliases and functions start with a comma?
# Glad you asked!
# Answer is here: https://rhodesmill.org/brandon/2009/commands-with-comma/


alias ..='cd ..' # Go up one directory
alias ...='cd ../..' # Go up two directories
alias ....='cd ../../..' # And for good measure



alias rm='rm -i'
alias ls='ls -F'
alias ll='ls -l'
alias la='ls -A'


alias ,nocr='tr -d \\015'

# Useful on systems where a simple 'man foo > /tmp/foo.man' captures terminal control characters
# I can instead use `man foo | ,nobs > /tmp/foo.man'
alias ,nobs='sed -e "s,.,,g"'



#from Nathan:
alias ,proxy="export http_proxy=localhost:8080;export https_proxy=localhost:8080"
alias ,proxy-no="unset http_proxy;unset https_proxy"
alias ,initp="touch __init__.py"
alias ,pycnuke='find . -iname \*.pyc -delete'
alias ,pypath-set='export PYTHONPATH=`pwd`'
alias ,pypath-no='unset PYTHONPATH'

alias ,path-here='PATH=`pwd`:"$PATH"'



# Print a nice border around a message
# to make it easier to find when scrolling through shell history
function ,msg() {
    echo
    echo "$*" | boxes -d shell
    echo
}

alias ,pause="read -p 'Hit <return> to continue...'"


# testing short cut:
alias ,curl='curl -H "Content-Type: application/json" -H "X-Auth-Token: ${TOKEN}"'


# Cute and very helpful functions that I got from Dan Bloch a long time ago.
# Very useful if your home directory is on a network file system, such as AFS,
# but also just very useful as short-cut anyways.
function G() {
    cd "`cat ~/.scratch/.M"$1" `"
}

function M() {
    pwd | ,nocr > ~/.scratch/.M"$1"
}

function R() {
    rm -i ~/.scratch/.M"$1"
}

function L() {
    cat ~/.scratch/.M | sed -e 's,^,	,'
    for d in `ls -A ~/.scratch | cut -c3-`
    do
        cat ~/.scratch/.M$d | sed -e "s,^,$d	,"
    done
}



alias e=emacs

# Lazy and also I sometimes forget the 'm' on 'vim' :-)
alias vi=vim


# Epoch seconds to UTC conversion, but hasn't aged well.
alias ,es2UTC='date -ujr'



# Update gnome terminal title
# - copied from https://askubuntu.com/questions/22413/how-to-change-gnome-terminal-title
function termtitle() {
    TITLE=$1
    shift
    # update title
    PROMPT_COMMAND='echo -ne "\033]0; $TITLE \007"'
}



# pew helpers
alias ,tmpvenv="pew mktmpenv -p python3"


# Behave helpers
alias ,plain="sed -E -e 's/^(default_format=).*/\1plain/' -i '' .behaverc"
alias ,progress="sed -E -e 's/^(default_format=).*/\1progress/' -i '' .behaverc"
alias ,stop="sed -E -e 's/^(stop=).*/\1true/' -i '' .behaverc"
alias ,go="sed -E -e 's/^(stop=).*/\1false/' -i '' .behaverc"


# flake8 helpers
alias ,f8='flake8 > /tmp/f8 ; vim /tmp/f8'


# git helpers
alias ,add='git add'
alias ,b=',branch'
alias ,bplain=",b --list -q | sed -e 's/^[* ]*//'"
alias ,branch='git branch'
alias ,cleanup-branches="git branch | sed -e 's/^.* //' | grep -v master | xargs git branch -d"
alias ,commit='git commit'
alias ,current-branch='git rev-parse --abbrev-ref HEAD'
alias ,d0=',d -U0'
alias ,d=',diff'
alias ,dc=',diff --cached'
alias ,dc0=',dc -U0'
alias ,dcno=',dc --name-only'
alias ,dno=',d --name-only'
alias ,dev=',tobranch develop'
alias ,diff='git diff'
alias ,fetch-all='git fetch --all'
alias ,fog=',mirror --dry-run'
alias ,glass=',mirror;,mirror;,mirror'
# And because I mistype this so much:
alias ,gof=,fog
alias ,l=',log'
alias ,log-all=',log --all'
alias ,log='git log --oneline --decorate --graph'
alias ,log='git log --graph --pretty=format:"%C(yellow)%h%Creset %cs %<(10,trunc)%an %Cgreen%d%Creset - %s"'
alias ,main='git checkout main'
alias ,master='git checkout master'
alias ,mirror=',push origin --mirror'
alias ,new-branch='git checkout -b'
alias ,pom=',push origin master'
alias ,prd='git checkout prd'
alias ,push='git push'
alias ,s=',status'
alias ,sall=',status -uall'
alias ,sa=',sall'
alias ,sno=',status -uno'
alias ,sn=',sno'
alias ,status='git status'
alias ,tip=',l -n1 --name-status'
alias ,top='cd "$(git rev-parse --show-toplevel)"'
alias ,tdf='tree --dirsfirst --noreport'
alias ,ups='git pull upstream master'
alias ,whacklogs='git clean -fXd logs'
alias :e='vim'
alias :q='exit'

function ,context() {
    ack --output '       $&' 'context\.\w+' | sort -t: -k 3 
}

# Easy way to check out a branch given a subsiring of the branch name.
# If more than one matches, it'll cycle through them.
# This won't hurt anything and isn't worth trying to enforce uniqueness on.
function ,tobranch() {
    git branch | sed -n -e 's/^.* //' -e /"$1"/p  | xargs -n 1 git checkout
}

# Rebase all the branches to master
function ,rall() {

    for x in $(git for-each-ref --format '%(refname:short)' refs/heads/)
    do
      git checkout "$x"
      git rebase master || return
      echo
    done
}

# Rebase all the branches except those matching the parameter as a pattern
# This is handy when you have a number of branches to rebase and you want
# to control the ordering. The last rebased branch is the easiest
# to see and find, so a combo of `,rbut favorite-branch ; ,rall` will
# make favorite-branch the last one to be rebased :-)
function ,rbut() {

    for x in $(git for-each-ref --format '%(refname:short)' refs/heads/)
    do
      echo
      if [[ "$x" =~ "$1" ]] ; then
         echo "Skipping $x"
         continue
      fi
      git checkout "$x"
      git rebase master || return
    done
}

# Rebase all branches to first param that match the second parameter
function ,ronly() {

    for x in $(git for-each-ref --format '%(refname:short)' refs/heads/)
    do
      echo
      if [[ ! "$x" =~ "$2" ]] ; then
         echo "Skipping $x"
         continue
      fi
      git checkout "$x"
      git rebase "$1" || return
    done
}

# Haven't used 'pew' as much since using docker containers more for things.
# command -v pew >& /dev/null && source $(pew shell_config)


# NOTES: pushing --mirror in git is easy.
#        Pulling, not so much.
# From:
#    https://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git
#        git clone --mirror path/to/original path/to/dest/.git
#        cd path/to/dest
#        git config --bool core.bare false
#        git checkout anybranch
